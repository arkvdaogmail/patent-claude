{"version":3,"sources":["../src/errors.ts","../src/helpers/helpers.ts","../src/available-errors/sdk-error.ts","../src/available-errors/abi/abi.ts","../src/available-errors/address/address.ts","../src/available-errors/bloom/bloom.ts","../src/available-errors/certificate/certificate.ts","../src/available-errors/contract/contract.ts","../src/available-errors/data/data.ts","../src/available-errors/hdkey/hdnode.ts","../src/available-errors/http/http.ts","../src/available-errors/keystore/keystore.ts","../src/available-errors/poll/poll.ts","../src/available-errors/provider/provider.ts","../src/available-errors/rlp/rlp.ts","../src/available-errors/rpc-proxy/rpc-proxy.ts","../src/available-errors/secp256k1/secp256k1.ts","../src/available-errors/signer/signer.ts","../src/available-errors/transaction/transaction.ts","../src/available-errors/vcdm/vcdm.ts"],"names":["errors_exports","__export","CannotFindTransaction","CertificateSignatureMismatch","ContractCallError","ContractDeploymentFailed","InvalidAbiDataToEncodeOrDecode","InvalidAbiItem","InvalidAbiSignatureFormat","InvalidAddress","InvalidBloom","InvalidBloomParams","InvalidCommandLineArguments","InvalidConfigurationFile","InvalidConfigurationFilePath","InvalidDataType","InvalidHDKey","InvalidHDKeyMnemonic","InvalidHTTPParams","InvalidHTTPRequest","InvalidKeystore","InvalidKeystoreParams","InvalidOperation","InvalidRLP","InvalidSecp256k1MessageHash","InvalidSecp256k1PrivateKey","InvalidSecp256k1Signature","InvalidTransactionField","InvalidTransactionType","JSONRPCInternalError","JSONRPCInvalidDefaultBlock","JSONRPCInvalidParams","JSONRPCInvalidRequest","JSONRPCMethodNotFound","JSONRPCMethodNotImplemented","JSONRPCParseError","JSONRPCProviderError","JSONRPCServerError","NotDelegatedTransaction","PollExecution","ProviderMethodError","SignerMethodError","UnavailableTransactionField","UnsupportedOperation","VechainSDKError","assertInnerError","createErrorMessage","stringifyData","data","seen","_key","value","error","methodName","errorMessage","inputData","innerError","internalErrorMessage","code","message"],"mappings":"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","file":"index.mjs","sourcesContent":["export * from './helpers';\nexport * from './available-errors';\n","/**\n * Function to stringify data correctly.\n * Some data types like Error, Map, Set, etc. are not stringified correctly by JSON.stringify.\n * This function handles those cases and avoids circular references.\n *\n * @param data - The data to be stringified.\n * @returns The stringified data.\n */\nconst stringifyData = (data: unknown): string => {\n    /**\n     * Function to avoid circular references when stringify data.\n     */\n    const getCircularReplacer = (): ((\n        key: string,\n        value: unknown\n    ) => unknown) => {\n        const seen = new WeakSet();\n        return (_key: string, value: unknown) => {\n            if (typeof value === 'object' && value !== null && _key !== '') {\n                if (seen.has(value)) {\n                    return;\n                }\n                seen.add(value);\n            }\n            if (typeof value === 'bigint') {\n                return value.toString() + 'n';\n            }\n            return value;\n        };\n    };\n\n    // Return the stringified data\n    return JSON.stringify(data, getCircularReplacer(), 2);\n};\n\n/**\n * Asserts that the given error is an instance of the Error class.\n * If the error is an instance of Error, it is returned.\n * If the error is not an instance of Error, a new Error object is created with a descriptive message.\n *\n * @param {unknown} error - The error to be asserted.\n * @return {Error} - The error if it is an instance of Error, or a new Error object if it is not.\n *\n * @remarks\n * **IMPORTANT: no sensitive data should be passed as any parameter.**\n */\nfunction assertInnerError(error: unknown): Error {\n    if (error instanceof Error) {\n        return error;\n    }\n\n    return new Error(\n        `Inner error is not an instance of Error. Object:\\n\\t${stringifyData(error)}`\n    );\n}\n\n/**\n * Function to build the error message.\n * Here, we can customize the error message format.\n *\n * @param methodName The name of the method that failed.\n * @param errorMessage The error message.\n * @param inputData The input data that caused the error.\n * @param innerError The inner error that caused the error.\n * @returns The error message as a string.\n */\nfunction createErrorMessage<TErrorDataType>(\n    methodName: string,\n    errorMessage: string,\n    inputData: TErrorDataType,\n    innerError?: Error\n): string {\n    const internalErrorMessage =\n        innerError?.message !== undefined\n            ? `\\n-Internal error: \\n\\t${innerError.message}`\n            : '';\n\n    return (\n        `Method '${methodName}' failed.` +\n        `\\n-Reason: '${errorMessage}'` +\n        `\\n-Parameters: \\n\\t${stringifyData(inputData)}` +\n        internalErrorMessage\n    );\n}\n\nexport { stringifyData, assertInnerError, createErrorMessage };\n","import { assertInnerError, createErrorMessage } from '../helpers';\n\n/**\n * Generic error class for SDK errors.\n *\n * Each error of SDK should extend this class.\n * And, then, error must redefine properly the TErrorDataType generic type.\n * In this way, the error will have a specific data type.\n */\nclass VechainSDKError<TErrorDataType> extends Error {\n    constructor(\n        readonly methodName: string,\n        readonly errorMessage: string,\n        readonly data: TErrorDataType,\n        readonly innerError?: unknown\n    ) {\n        super(\n            createErrorMessage(\n                methodName,\n                errorMessage,\n                data,\n                innerError === undefined\n                    ? undefined\n                    : assertInnerError(innerError)\n            )\n        );\n    }\n}\n\nexport { VechainSDKError };\n","import { VechainSDKError } from '../sdk-error';\nimport { type ObjectErrorData } from '../types';\n\n/**\n * Invalid data to encode/decode abi error\n *\n * WHEN TO USE:\n * * This error will be thrown when the data to encode or decode into abi is invalid.\n */\nclass InvalidAbiDataToEncodeOrDecode extends VechainSDKError<ObjectErrorData> {}\n\n/**\n * Invalid ABI item error\n *\n * WHEN TO USE:\n * * This error will be thrown when the ABI item is invalid.\n */\nclass InvalidAbiItem extends VechainSDKError<{\n    type: 'function' | 'event';\n    value: unknown;\n}> {}\n\n/**\n * Invalid abi signature format error\n *\n * WHEN TO USE:\n * * This error will be thrown when the abi signature format is invalid.\n */\nclass InvalidAbiSignatureFormat extends VechainSDKError<{\n    signatureFormat: string;\n}> {}\n\nexport {\n    InvalidAbiDataToEncodeOrDecode,\n    InvalidAbiItem,\n    InvalidAbiSignatureFormat\n};\n","import { VechainSDKError } from '../sdk-error';\n\n/**\n * Invalid address error\n *\n * WHEN TO USE:\n * * This error will be thrown when the address is invalid.\n */\nclass InvalidAddress extends VechainSDKError<{ address: string }> {}\n\nexport { InvalidAddress };\n","import { VechainSDKError } from '../sdk-error';\nimport { type ObjectErrorData } from '../types';\n\n/**\n * Invalid bloom error.\n *\n * WHEN TO USE:\n * * Error will be thrown when the bloom is invalid.\n */\nclass InvalidBloom extends VechainSDKError<ObjectErrorData> {}\n\n/**\n * Invalid bloom params error.\n *\n * WHEN TO USE:\n * * Error will be thrown when the bloom params are invalid.\n */\nclass InvalidBloomParams extends VechainSDKError<ObjectErrorData> {}\n\nexport { InvalidBloom, InvalidBloomParams };\n","import { VechainSDKError } from '../sdk-error';\nimport { type ObjectErrorData } from '../types';\n\n/**\n * Certificate Signature error.\n *\n * WHEN TO USE:\n * * This error will be thrown when the certificate signature is invalid\n * OR the certificate is not signed, or has in general signature errors.\n */\nclass CertificateSignatureMismatch extends VechainSDKError<ObjectErrorData> {}\n\nexport { CertificateSignatureMismatch };\n","import { VechainSDKError } from '../sdk-error';\nimport { type ObjectErrorData } from '../types';\n\n/**\n * Cannot find transaction error.\n *\n * WHEN TO USE:\n * * Error will be thrown when the transaction is not into the blockchain.\n */\nclass ContractDeploymentFailed extends VechainSDKError<ObjectErrorData> {}\n\n/**\n * Error when calling a read function on a contract.\n *\n * WHEN TO USE:\n * * Error will be thrown when a read (call) operation fails.\n */\nclass ContractCallError extends VechainSDKError<ObjectErrorData> {}\n\nexport { ContractCallError, ContractDeploymentFailed };\n","import { VechainSDKError } from '../sdk-error';\nimport { type ObjectErrorData } from '../types';\n\n/**\n * Invalid data type error.\n *\n * WHEN TO USE:\n * * This error will be thrown when the data type is invalid.\n * -e.g.- when the data type is not a string, number, boolean, or object.\n */\nclass InvalidDataType extends VechainSDKError<ObjectErrorData> {}\n\n/**\n * Unsupported operation error.\n *\n * WHEN TO USE:\n * * This error will be thrown when an operation is not supported.\n * -e.g.- into the ethers adapter, when the runner does not support sending transactions.\n */\nclass UnsupportedOperation extends VechainSDKError<ObjectErrorData> {}\n\nexport { InvalidDataType, UnsupportedOperation };\n","import { VechainSDKError } from '../sdk-error';\n\n/**\n * Invalid HDNode mnemonic error.\n *\n * WHEN TO USE:\n * * This error will be thrown when the HDKey mnemonic is invalid.\n *\n * @note Data (mnemonic) is undefined for security reasons, the mnemonic should not be logged!\n */\nclass InvalidHDKeyMnemonic extends VechainSDKError<\n    undefined | { wordlistSize: number }\n> {}\n\n/**\n * Invalid HDNode error.\n *\n * WHEN TO USE:\n * * This error will be thrown when the HDKey is invalid (derivation path / chainCode / public key parameters).\n */\nclass InvalidHDKey extends VechainSDKError<{\n    derivationPath?: string;\n    chainCode?: Uint8Array;\n    publicKey?: Uint8Array;\n}> {}\n\nexport { InvalidHDKeyMnemonic, InvalidHDKey };\n","import { VechainSDKError } from '../sdk-error';\n\n/**\n * Http invalid request error\n *\n * WHEN TO USE:\n * * Error will be thrown when an invalid HTTP request fails\n */\nclass InvalidHTTPRequest extends VechainSDKError<{\n    method: string;\n    url: string;\n}> {}\n\n/**\n * Http invalid params error\n *\n * WHEN TO USE:\n * * Error will be thrown when HTTP request params are invalid\n */\nclass InvalidHTTPParams extends VechainSDKError<{\n    method: string;\n    url: string;\n}> {}\n\nexport { InvalidHTTPRequest, InvalidHTTPParams };\n","import { VechainSDKError } from '../sdk-error';\nimport { type ObjectErrorData } from '../types';\n\n/**\n * Invalid keystore error.\n *\n * WHEN TO USE:\n * * Error will be thrown when the keystore is invalid.\n */\nclass InvalidKeystore extends VechainSDKError<ObjectErrorData> {}\n\n/**\n * Invalid keystore params error.\n *\n * WHEN TO USE:\n * * Error will be thrown when the keystore params are invalid.\n */\nclass InvalidKeystoreParams extends VechainSDKError<ObjectErrorData> {}\n\nexport { InvalidKeystore, InvalidKeystoreParams };\n","import { VechainSDKError } from '../sdk-error';\n\n/**\n * Poll execution error.\n *\n * WHEN TO USE:\n * * Error will be thrown when a poll execution of a function throw error\n */\nclass PollExecution extends VechainSDKError<{ functionName: string }> {}\n\nexport { PollExecution };\n","import { VechainSDKError } from '../sdk-error';\nimport type { JSONRpcErrorCode, ObjectErrorData } from '../types';\n\n/**\n * Provider method error.\n *\n * WHEN TO USE:\n * * This error will be thrown when a provider method has failed.\n */\nclass ProviderMethodError extends VechainSDKError<ObjectErrorData> {}\n\n/**\n * Provider generic error.\n *\n * WHEN TO USE:\n * * It is a subclass of all provider errors\n *\n * @see{https://www.jsonrpc.org/specification#error_object}\n */\nclass JSONRPCProviderError extends VechainSDKError<{\n    code: JSONRpcErrorCode;\n    message: string;\n    data: ObjectErrorData;\n}> {\n    constructor(\n        readonly methodName: string,\n        code: JSONRpcErrorCode,\n        message: string,\n        data: ObjectErrorData,\n        readonly innerError?: unknown\n    ) {\n        super(methodName, message, { code, message, data }, innerError);\n    }\n}\n\n/**\n * Parse error.\n *\n * WHEN TO USE:\n * * Invalid JSON was received by the server. An error occurred on the server while parsing the JSON text.\n */\nclass JSONRPCParseError extends JSONRPCProviderError {\n    constructor(\n        readonly methodName: string,\n        message: string,\n        data: ObjectErrorData,\n        readonly innerError?: unknown\n    ) {\n        super(methodName, -32700, message, data, innerError);\n    }\n}\n\n/**\n * Invalid request.\n *\n * WHEN TO USE:\n * * The JSON sent is not a valid Request object.\n */\nclass JSONRPCInvalidRequest extends JSONRPCProviderError {\n    constructor(\n        readonly methodName: string,\n        message: string,\n        data: ObjectErrorData,\n        readonly innerError?: unknown\n    ) {\n        super(methodName, -32600, message, data, innerError);\n    }\n}\n\n/**\n * Method not found.\n *\n * WHEN TO USE:\n * * The method does not exist / is not available.\n */\nclass JSONRPCMethodNotFound extends JSONRPCProviderError {\n    constructor(\n        readonly methodName: string,\n        message: string,\n        data: ObjectErrorData,\n        readonly innerError?: unknown\n    ) {\n        super(methodName, -32601, message, data, innerError);\n    }\n}\n\n/**\n * Invalid params.\n *\n * WHEN TO USE:\n * * Invalid method parameter(s).\n */\nclass JSONRPCInvalidParams extends JSONRPCProviderError {\n    constructor(\n        readonly methodName: string,\n        message: string,\n        data: ObjectErrorData,\n        readonly innerError?: unknown\n    ) {\n        super(methodName, -32602, message, data, innerError);\n    }\n}\n\n/**\n * Internal JSON-RPC error.\n *\n * WHEN TO USE:\n * * Internal JSON-RPC error.\n */\nclass JSONRPCInternalError extends JSONRPCProviderError {\n    constructor(\n        readonly methodName: string,\n        message: string,\n        data: ObjectErrorData,\n        readonly innerError?: unknown\n    ) {\n        super(methodName, -32603, message, data, innerError);\n    }\n}\n\n/**\n * Invalid default block.\n *\n * WHEN TO USE:\n * * When converting default block to vechain revision\n */\nclass JSONRPCInvalidDefaultBlock extends VechainSDKError<string> {}\n\n/**\n * Server error.\n *\n * WHEN TO USE:\n * * Reserved for implementation-defined server-errors.\n */\nclass JSONRPCServerError extends JSONRPCProviderError {\n    constructor(\n        readonly methodName: string,\n        message: string,\n        data: ObjectErrorData,\n        readonly innerError?: unknown\n    ) {\n        super(methodName, -32000, message, data, innerError);\n    }\n}\n\n/**\n * Method not implemented.\n *\n * WHEN TO USE:\n * * When a method is implemented but not yet supported by the provider.\n */\nclass JSONRPCMethodNotImplemented extends JSONRPCProviderError {\n    constructor(\n        readonly methodName: string,\n        message: string,\n        data: ObjectErrorData,\n        readonly innerError?: unknown\n    ) {\n        super(methodName, -32004, message, data, innerError);\n    }\n}\n\nexport {\n    JSONRPCInternalError,\n    JSONRPCInvalidParams,\n    JSONRPCInvalidRequest,\n    JSONRPCMethodNotFound,\n    JSONRPCMethodNotImplemented,\n    JSONRPCParseError,\n    JSONRPCProviderError,\n    JSONRPCServerError,\n    ProviderMethodError,\n    JSONRPCInvalidDefaultBlock\n};\n","import { VechainSDKError } from '../sdk-error';\nimport type { ObjectErrorData } from '../types';\n\n/**\n * Invalid RLP error.\n *\n * WHEN TO USE:\n * * Error will be thrown when the RLP is invalid.\n */\nclass InvalidRLP extends VechainSDKError<{\n    context: string;\n    data: ObjectErrorData;\n}> {}\n\nexport { InvalidRLP };\n","import { VechainSDKError } from '../sdk-error';\n\n/**\n * Invalid command line arguments\n *\n * WHEN TO USE:\n * * When the RPC proxy is called with invalid command line arguments\n */\nclass InvalidCommandLineArguments extends VechainSDKError<{\n    flag: string;\n    value: string;\n}> {}\n\n/**\n * Invalid configuration file path\n *\n * WHEN TO USE:\n * * When the configuration file path given as input is invalid\n */\nclass InvalidConfigurationFilePath extends VechainSDKError<{\n    filePath: string;\n}> {}\n\n/**\n * Invalid configuration file\n *\n * WHEN TO USE:\n * * When the configuration file given as input is invalid\n */\nclass InvalidConfigurationFile extends VechainSDKError<{\n    filePath?: string;\n    wrongField?: string;\n    message?: string;\n}> {}\n\nexport {\n    InvalidCommandLineArguments,\n    InvalidConfigurationFilePath,\n    InvalidConfigurationFile\n};\n","import { VechainSDKError } from '../sdk-error';\n\n/**\n * Invalid secp256k1 private key error.\n *\n * WHEN TO USE:\n * * Error will be thrown when the secp256k1 private key is invalid.\n *\n * @note Data (private key) is undefined for security reasons, the private key should not be logged!\n */\nclass InvalidSecp256k1PrivateKey extends VechainSDKError<undefined> {}\n\n/**\n * Invalid secp256k1 message hash error.\n *\n * WHEN TO USE:\n * * Error will be thrown when the secp256k1 message hash is invalid.\n */\nclass InvalidSecp256k1MessageHash extends VechainSDKError<{\n    messageHash: Uint8Array;\n}> {}\n\n/**\n * Invalid secp256k1 signature error.\n *\n * WHEN TO USE:\n * * Error will be thrown when the secp256k1 signature is invalid.\n */\nclass InvalidSecp256k1Signature extends VechainSDKError<{\n    signature: Uint8Array;\n    recovery?: number;\n}> {}\n\nexport {\n    InvalidSecp256k1PrivateKey,\n    InvalidSecp256k1MessageHash,\n    InvalidSecp256k1Signature\n};\n","import { VechainSDKError } from '../sdk-error';\nimport { type ObjectErrorData } from '../types';\n\n/**\n * Signer method error.\n *\n * WHEN TO USE:\n * * This error will be thrown when a signer method has failed.\n */\nclass SignerMethodError extends VechainSDKError<ObjectErrorData> {}\n\nexport { SignerMethodError };\n","import { VechainSDKError } from '../sdk-error';\nimport type { ObjectErrorData } from '../types';\n\n/**\n * Unavailable transaction field (field name) error.\n *\n * WHEN TO USE:\n * * Error will be thrown when a transaction (field name) in a transaction is unavailable.\n */\nclass UnavailableTransactionField extends VechainSDKError<{\n    fieldName: string;\n}> {}\n\n/**\n * Invalid transaction field (field name) error.\n *\n * WHEN TO USE:\n * * Error will be thrown when a transaction (field name) in a transaction is invalid.\n */\nclass InvalidTransactionField extends VechainSDKError<\n    {\n        fieldName: string;\n    } & ObjectErrorData\n> {}\n\n/**\n * Not delegated transaction error.\n *\n * WHEN TO USE:\n * * Error will be thrown when the transaction is not delegated.\n */\nclass NotDelegatedTransaction extends VechainSDKError<\n    undefined | { gasPayerUrl: string }\n> {}\n\n/**\n * Cannot find transaction error.\n *\n * WHEN TO USE:\n * * Error will be thrown when the transaction is not into the blockchain.\n */\nclass CannotFindTransaction extends VechainSDKError<{\n    transactionHash?: string;\n    networkUrl?: string;\n}> {}\n\n/**\n * Invalid transaction type error.\n *\n * WHEN TO USE:\n * * Error will be thrown when the transaction type is invalid.\n */\nclass InvalidTransactionType extends VechainSDKError<{\n    transactionType?: string;\n    validTypes?: string;\n}> {}\n\nexport {\n    UnavailableTransactionField,\n    InvalidTransactionField,\n    NotDelegatedTransaction,\n    CannotFindTransaction,\n    InvalidTransactionType\n};\n","import { VechainSDKError } from '../sdk-error';\nimport { type ObjectErrorData } from '../types';\n\n/**\n * Invalid cast type error.\n *\n * WHEN TO USE:\n * * Error will be thrown when a method call or property read fails.\n */\nclass InvalidOperation extends VechainSDKError<ObjectErrorData> {}\n\nexport { InvalidOperation };\n"]}