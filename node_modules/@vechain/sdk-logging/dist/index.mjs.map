{"version":3,"sources":["../src/logging.ts","../src/logger/log-logger/log-logger.ts","../src/logger/error-logger/error-logger.ts","../src/logger/warning-logger/warning-logger.ts","../src/logger/vechainSDKLogger.ts"],"names":["logging_exports","__export","VeChainSDKLogger","_logLogFunction","data","messagesAsString","message","_logErrorFunction","error","_logWarningFunction","loggerType"],"mappings":"6FAAA,IAAAA,CAAAA,CAAA,GAAAC,CAAAA,CAAAD,CAAAA,CAAA,sBAAAE,CAAAA,CAAAA,CAAAA,CCKA,IAAMC,CAAAA,CAA0C,CAC5C,GAAA,CAAMC,CAAAA,EAAwB,CAE1B,IAAMC,CAAAA,CAAmBD,EAAK,QAAA,CACzB,GAAA,CAAKE,GAAY,CAAA,EAAA,EAAKA,CAAO,CAAA,CAAE,CAAA,CAC/B,IAAA,CAAK;AAAA,CAAI,CAAA,CAEd,QAAQ,GAAA,CACJ;AAAA,0BAAA,EAA+BF,EAAK,KAAK,CAAA;AAAA,CAAA,CACrCC,CAAAA,CACA;AAAA,CACR,EACJ,CACJ,CAAA,CCZA,IAAME,CAAAA,CAA8C,CAChD,GAAA,CAAkBC,CAAAA,EAAuC,CACrD,OAAA,CAAQ,KAAA,CACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAA,CAIAA,CAAAA,CAAM,UAAA,CACNA,CAAAA,CAAM,YAAA,CACNA,CAAAA,CAAM,IAAA,CACNA,CAAAA,CAAM,UACV,EACJ,CACJ,CAAA,CCdA,IAAMC,CAAAA,CAA8C,CAChD,GAAA,CAAML,CAAAA,EAAwB,CAE1B,IAAMC,CAAAA,CAAmBD,CAAAA,CAAK,QAAA,CACzB,GAAA,CAAKE,CAAAA,EAAY,CAAA,EAAA,EAAKA,CAAO,CAAA,CAAE,CAAA,CAC/B,IAAA,CAAK;AAAA,CAAI,CAAA,CAEd,QAAQ,IAAA,CACJ;AAAA,4BAAA,EAAiCF,EAAK,KAAK,CAAA;AAAA,CAAA,CACvCC,CAAAA,CACA;AAAA,CACR,EACJ,CACJ,CAAA,CCVA,IAAMH,CAAAA,CACFQ,CAAAA,EAEIA,CAAAA,GAAe,OAAA,CACRH,CAAAA,CAEPG,CAAAA,GAAe,SAAA,CACRD,CAAAA,CAEJN","file":"index.mjs","sourcesContent":["export * from './logger';\n","import type { LogFunctionType, LogLoggerData } from '../types';\n\n/**\n * Log logger internal function.\n */\nconst _logLogFunction: LogFunctionType<'log'> = {\n    log: (data: LogLoggerData) => {\n        // Convert messages to string\n        const messagesAsString = data.messages\n            .map((message) => `- ${message}`)\n            .join('\\n');\n\n        console.log(\n            `\\n****************** EVENT: ${data.title} ******************\\n` +\n                messagesAsString +\n                `\\n`\n        );\n    }\n};\n\nexport { _logLogFunction };\n","import type { LogFunctionType } from '../types';\nimport { type VechainSDKError } from '@vechain/sdk-errors';\n\n/**\n * Error logger internal function.\n */\nconst _logErrorFunction: LogFunctionType<'error'> = {\n    log: <TErrorData>(error: VechainSDKError<TErrorData>) => {\n        console.error(\n            `\\n****************** ERROR ON: %s ******************\\n` +\n                `- Error message: '%s'` +\n                '\\n- Error data:\\n%o' +\n                `\\n- Internal error:\\n%o\\n`,\n            error.methodName,\n            error.errorMessage,\n            error.data,\n            error.innerError\n        );\n    }\n};\n\nexport { _logErrorFunction };\n","import type { LogFunctionType, LogLoggerData } from '../types';\n\n/**\n * Warning logger internal function.\n */\nconst _logWarningFunction: LogFunctionType<'log'> = {\n    log: (data: LogLoggerData) => {\n        // Convert messages to string\n        const messagesAsString = data.messages\n            .map((message) => `- ${message}`)\n            .join('\\n');\n\n        console.warn(\n            `\\n****************** WARNING: ${data.title} ******************\\n` +\n                messagesAsString +\n                `\\n`\n        );\n    }\n};\n\nexport { _logWarningFunction };\n","import { type LogFunctionType, type LoggerType } from './types';\nimport { _logLogFunction } from './log-logger';\nimport { _logErrorFunction } from './error-logger';\nimport { _logWarningFunction } from './warning-logger';\n\n/**\n * Logger function that returns a log function based on the logger type.\n */\nconst VeChainSDKLogger = <TLoggerType extends LoggerType>(\n    loggerType: TLoggerType\n): LogFunctionType<typeof loggerType> => {\n    if (loggerType === 'error')\n        return _logErrorFunction as LogFunctionType<typeof loggerType>;\n\n    if (loggerType === 'warning')\n        return _logWarningFunction as LogFunctionType<typeof loggerType>;\n\n    return _logLogFunction as LogFunctionType<typeof loggerType>;\n};\n\nexport { VeChainSDKLogger };\n"]}